{"version":3,"sources":["Note/Note.jsx","NoteForm/NoteForm.jsx","Config/config.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","handleRemoveNote","bind","assertThisInitialized","id","removeNote","_this2","react_default","a","createElement","className","onClick","Component","NoteForm","state","newNoteContent","handleUserInput","writeNote","e","setState","target","value","addNote","placeholder","onChange","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","app","firebase","initializeApp","database","ref","child","notes","previousNotes","on","snap","push","key","val","i","length","splice","note","set","console","log","remove","_this3","map","src_Note_Note","src_NoteForm_NoteForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.942a38e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Note.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Note extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.noteContent = props.noteContent;\r\n    this.noteId = props.noteId;\r\n    this.handleRemoveNote = this.handleRemoveNote.bind(this);\r\n  }\r\n\r\n  handleRemoveNote(id) {\r\n    this.props.removeNote(id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"note fade-in\">\r\n        <span\r\n          className=\"closebtn\"\r\n          onClick={() => this.handleRemoveNote(this.noteId)}\r\n        >\r\n          &times;\r\n        </span>\r\n        <p className=\"noteContent\">{this.noteContent}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNote.propTypes = {\r\n  noteContent: PropTypes.string\r\n};\r\n\r\nexport default Note;\r\n","import React, { Component } from 'react';\r\nimport './NoteForm.css';\r\n\r\nclass NoteForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            newNoteContent: '',\r\n        };\r\n\r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n        this.writeNote = this.writeNote.bind(this);\r\n    }\r\n\r\n    // When the user input changes, set the newNoteContent\r\n    // to the value of what's in the input box.\r\n    handleUserInput(e){\r\n        this.setState({\r\n            newNoteContent: e.target.value, // the value of the text input\r\n        })\r\n    }\r\n\r\n    writeNote(){\r\n        // call a method that sets the noteContent for a note to\r\n        // the value of the input\r\n        this.props.addNote(this.state.newNoteContent);\r\n\r\n        // Set newNoteContent back to an empty string.\r\n        this.setState({\r\n            newNoteContent: '',\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"formWrapper\">\r\n                <input className=\"noteInput\"\r\n                placeholder=\"Write a new note...\"\r\n                value={this.state.newNoteContent} \r\n                onChange={this.handleUserInput} />\r\n                <button className=\"noteButton\"\r\n                onClick={this.writeNote}> Add Note</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoteForm;","\r\n  export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyCwxu301NpnOHoQ-NfGvafEL62dZhHVFQA\",\r\n    authDomain: \"todo-5d257.firebaseapp.com\",\r\n    databaseURL: \"https://todo-5d257.firebaseio.com\",\r\n    projectId: \"todo-5d257\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"761825484314\",\r\n    appId: \"1:761825484314:web:aa481909538656e2\"\r\n  };\r\n  ","import React, { Component } from 'react';\nimport Note from './Note/Note';\nimport NoteForm from './NoteForm/NoteForm';\nimport { DB_CONFIG } from './Config/config';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child('notes');\n\n    // We're going to setup the React state of our component\n    this.state = {\n      notes: [],\n    }\n  }\n\n  componentWillMount(){\n    const previousNotes = this.state.notes;\n\n    // DataSnapshot\n    this.database.on('child_added', snap => {\n      previousNotes.push({\n        id: snap.key,\n        noteContent: snap.val().noteContent,\n      })\n\n      this.setState({\n        notes: previousNotes\n      })\n    })\n\n    this.database.on('child_removed', snap => {\n      for(var i=0; i < previousNotes.length; i++){\n        if(previousNotes[i].id === snap.key){\n          previousNotes.splice(i, 1);\n        }\n      }\n\n      this.setState({\n        notes: previousNotes\n      })\n    })\n  }\n\n  addNote(note){\n    this.database.push().set({ noteContent: note});\n  }\n\n  removeNote(noteId){\n    console.log(\"from the parent: \" + noteId);\n    this.database.child(noteId).remove();\n  }\n\n  render() {\n    return (\n      <div className=\"notesWrapper\">\n        <div className=\"notesHeader\">\n          <div className=\"heading\">React & Firebase To-Do List</div>\n        </div>\n        <div className=\"notesBody\">\n          {\n            this.state.notes.map((note) => {\n              return (\n                <Note noteContent={note.noteContent} \n                noteId={note.id} \n                key={note.id} \n                removeNote ={this.removeNote}/>\n              )\n            })\n          }\n        </div>\n        <div className=\"notesFooter\">\n          <NoteForm addNote={this.addNote} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}